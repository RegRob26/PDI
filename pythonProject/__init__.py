# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xvtHn-DHGbUlX_PLwzMu25WKbIVVnt7z

Prueba transformaciones con OpenCv
"""

import cv2
import numpy as np
from matplotlib import pyplot as plt

from transformaciones import negativo, transformacion_log, transformacion_gamma, rebanada_de_bit, rebanada_de_intensidad, \
    estiramiento_contraste, cv2_imshow, retorno_rango, mostrar_histograma

"""Importando la imagen"""
img = cv2.imread('highcontrast4.jpg', cv2.IMREAD_GRAYSCALE)
img = np.array(img, dtype=np.int32)

# Mostrando la imagen
cv2_imshow(img, 'Imagen original')

"""Mostrando el histograma"""
mostrar_histograma(img, 'Histograma original')

"""Transformación negativa"""
img_negativa = negativo(img)
cv2_imshow(img_negativa, 'Transformación negativa')
mostrar_histograma(img_negativa, 'Histograma negativo')

"""Transformación logarítmica"""
# c = [1, 2, 3]
# fig, axs = plt.subplots(len(c), 1, figsize=(10, 10))  # fig debe ser primero, axs después
#
# for idx, i in enumerate(c):
#     img_log = transformacion_log(i, img)
#     axs[idx].imshow(img_log, cmap='gray')  # axs[idx] en lugar de fig[i]
#     axs[idx].set_title(f'c: {i}')  # Colocar el título por fila
#     axs[idx].axis('off')
#
# fig.suptitle('Transformación Logarítmica', fontsize=16)
#
#
# plt.tight_layout()  # Para ajustar los subplots y que no se superpongan
# plt.show()

c = 1
img_log = transformacion_log(c, img)
cv2_imshow(img_log, 'Transformación logarítmica c=1')
mostrar_histograma(img_log, 'Histograma logarítmico')

"""Transformación gamma"""
c = [1, 2, 3]
gamma = [0.01, 0.05, 0.1, 0.2, 0.5, 1]

axs, fig = plt.subplots(len(c), len(gamma), figsize=(10, 10))
for index, i in enumerate(c):
    for indexg, g in enumerate(gamma):
        img_gamma = transformacion_gamma(img, i, g)
        fig[index, indexg].imshow(img_gamma, cmap='gray')
        fig[index, indexg].set_title(f'gamma: {g}')
        fig[index, indexg].axis('off')

for index, i in enumerate(c):
    axs.text(0.02, (len(c)-index-0.5)/len(c), f'c: {i}', va='center', ha='center', rotation='vertical', fontsize=12)


plt.show()
mostrar_histograma(img_gamma, 'Histograma gamma')

"""Transformación de plano de bits"""
axs, fig = plt.subplots(2, 4, figsize=(10, 10))
for i in range(8):
    img_bit = rebanada_de_bit(img, i)
    print(img_bit.min(), img_bit.max())
    fig[i // 4, i % 4].imshow(img_bit, cmap='gray')
    fig[i // 4, i % 4].set_title(f'Plano de bits {i}')
    fig[i // 4, i % 4].axis('off')
plt.tight_layout()
plt.show()

"""Transformación de intensidad"""
a = 0
b = 10
img_intensity = rebanada_de_intensidad(img, a, b, tono_objetivo=255, version=1)
cv2_imshow(img_intensity, f'Transformación de intensidad a={a}, b={b}')
mostrar_histograma(img_intensity, 'Histograma de intensidad')

"""Estiramiento de contraste"""
print(img.min(), img.max())
img_contrast = estiramiento_contraste(img, np.min(img), 0, np.max(img), 255)
cv2_imshow(img_contrast, 'Estiramiento de contraste')
mostrar_histograma(img_contrast, 'Histograma de contraste')

